<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jon Gomez Blog</title>
    <link>https://jongomez.github.io/tags/webgl/index.xml</link>
    <description>Recent content on Jon Gomez Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://jongomez.github.io/tags/webgl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introducing NumGL</title>
      <link>https://jongomez.github.io/post/numgl/</link>
      <pubDate>Wed, 21 Jan 2015 12:08:47 +0100</pubDate>
      
      <guid>https://jongomez.github.io/post/numgl/</guid>
      <description>

&lt;br/&gt;


&lt;p&gt;(2 minute read)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you&amp;rsquo;re looking for general-purpose computing with WebGL (specifically BLAS stuff) check out the amazing &lt;a href=&#34;https://github.com/waylonflinn/weblas&#34;&gt;weblas&lt;/a&gt; library. This post is a bit old, and at the time using WebGL for general-purpose computing seemed like a painful dirty hack.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WebGL for general-purpose computing sounded like a good idea at first.
Simply send data to the GPU as textures and perform the calculations there.
Browsers can handle it, and very few people seemed to be doing this.&lt;/p&gt;

&lt;p&gt;Turns out people weren&amp;rsquo;t doing this for several reasons, the main one being: weak support for float texture values. There&amp;rsquo;s an extension called &lt;em&gt;oes_texture_float&lt;/em&gt;, which helps a lot, &lt;a href=&#34;http://stackoverflow.com/questions/17476632/webgl-extension-support-across-browsers&#34;&gt;but it&amp;rsquo;s still a bit clumsy.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if you&amp;rsquo;re not using &lt;em&gt;oes_texture_float&lt;/em&gt; and want to to send float data to the shaders, the data has to be RGBA-encoded into a texture (on the JavaScript side), sent to the WebGL side and once there, decoded back into floats. Ouch.
Not to mention reading back the float results on the JS side, &lt;a href=&#34;http://stackoverflow.com/questions/17981163/webgl-read-pixels-from-floating-point-render-target&#34;&gt;which can also be painful.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lab.concord.org/experiments/webgl-gpgpu/webgl.html&#34;&gt;Here&amp;rsquo;s an overview of 2 methods that do all of the above.&lt;/a&gt; Some issues are: performance bottlenecks, additional JavaScript and GLSL code, and errors associated with the float / RGBA conversions.&lt;/p&gt;

&lt;p&gt;What about image processing and computer vision? The images / video frames can be processed by WebGL as regular textures, no need for float / RGBA conversions. It seemed like a better idea, and there were already a couple of cool projects using this approach (eg: webcam toy and glfx.js).&lt;/p&gt;

&lt;p&gt;So I decided to do something along those lines and started working on NumGL - a WebGL image / video processing library. Here&amp;rsquo;s a couple of things you can do with it.&lt;/p&gt;

&lt;h3 id=&#34;greyscaling&#34;&gt;Greyscaling&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://jongomez.github.io/media/numgl/grey.png&#34; alt=&#34;Greyscale Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The NumGL code for this effect is:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// &amp;quot;image&amp;quot; is the &amp;lt;img&amp;gt; tag ID.&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;imageId&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;numgl.store_picture(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;numgl.show_canvas(imageId)&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;numgl.grey(imageId);&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;numgl.do_it();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To apply this or any of the following effects on video / webcam, simply change the &lt;em&gt;store_picture()&lt;/em&gt; function to &lt;em&gt;store_video()&lt;/em&gt; and &lt;em&gt;store_webcam()&lt;/em&gt;, respectively. Fiddle around with this code here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jsfiddle.net/jongomez/q3n5gj7u/&#34;&gt;grey pic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsfiddle.net/sputro0e/&#34;&gt;grey video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jsfiddle.net/wm4gr6co/1/&#34;&gt;grey webcam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;convolution-kernel&#34;&gt;Convolution kernel&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://jongomez.github.io/media/numgl/conv.png&#34; alt=&#34;Convolution Kernel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Apply a convolution kernel to an image, video or webcam. The code is identical to the above example, just replace the numgl.grey() call with&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// Apply convolution kernel to the stored image.&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;numgl.convolution(imageId,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where the array [-1,-1,-1,0,0,0,1,1,1] corresponds to the following kernel&lt;/p&gt;

$$\begin{bmatrix}-1 &amp; -1 &amp; -1\\0 &amp; 0 &amp; 0\\1 &amp; 1 &amp; 1\end{bmatrix}$$


&lt;p&gt;JS Fiddle with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jsfiddle.net/jongomez/6pgbwkff/&#34;&gt;pic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsfiddle.net/m1gbshz6/&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jsfiddle.net/rsn9cdkb/1/&#34;&gt;webcam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;thresholding&#34;&gt;Thresholding&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://jongomez.github.io/media/numgl/thresh.png&#34; alt=&#34;Thresholding&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The function call is&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// Threshold the stored image.&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;numgl.threshold(imageId,&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where 80 is the threshold value.
JS Fiddles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jsfiddle.net/jongomez/eap27rhq/&#34;&gt;pic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsfiddle.net/wuLcef2y/&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jsfiddle.net/w8f7z6eu/&#34;&gt;webcam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h4&gt;

&lt;p&gt;WebGL does image processing and computer vision stuff with ease and speed.
NumGL is a WebGL image / video processing library. &lt;a href=&#34;https://github.com/jongomez/numgl&#34;&gt;Fork me on Github. Also check it out for additional docs and examples.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>